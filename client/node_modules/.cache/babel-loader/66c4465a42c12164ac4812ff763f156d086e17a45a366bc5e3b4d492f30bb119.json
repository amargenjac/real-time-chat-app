{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, withCtx as _withCtx, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_app_bar = _resolveComponent(\"v-app-bar\");\n  const _component_v_list_item = _resolveComponent(\"v-list-item\");\n  const _component_v_list_item_title = _resolveComponent(\"v-list-item-title\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_list_item_content = _resolveComponent(\"v-list-item-content\");\n  const _component_v_list = _resolveComponent(\"v-list\");\n  const _component_v_navigation_drawer = _resolveComponent(\"v-navigation-drawer\");\n  const _component_ChatView = _resolveComponent(\"ChatView\");\n  const _component_v_main = _resolveComponent(\"v-main\");\n  const _component_v_layout = _resolveComponent(\"v-layout\");\n  return _openBlock(), _createBlock(_component_v_layout, {\n    class: \"rounded rounded-md\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_app_bar, {\n      color: \"surface-variant\",\n      title: \"Application bar\"\n    }), _createVNode(_component_v_navigation_drawer, null, {\n      default: _withCtx(() => [_createVNode(_component_v_list, null, {\n        default: _withCtx(() => [_createVNode(_component_v_list_item, {\n          title: \"Online\"\n        }), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.connectedUsers, (user, index) => {\n          return _openBlock(), _createBlock(_component_v_list_item, {\n            key: index,\n            onClick: $event => $options.startChatWithConnectedUser(user.userId)\n          }, {\n            default: _withCtx(() => [_createVNode(_component_v_list_item_content, null, {\n              default: _withCtx(() => [_createVNode(_component_v_btn, {\n                variant: \"tonal\",\n                class: \"chat-card\"\n              }, {\n                default: _withCtx(() => [_createVNode(_component_v_list_item_title, null, {\n                  default: _withCtx(() => [_createTextVNode(_toDisplayString(user.username), 1)]),\n                  _: 2\n                }, 1024)]),\n                _: 2\n              }, 1024)]),\n              _: 2\n            }, 1024)]),\n            _: 2\n          }, 1032, [\"onClick\"]);\n        }), 128))]),\n        _: 1\n      })]),\n      _: 1\n    }), _createVNode(_component_v_navigation_drawer, {\n      location: \"right\"\n    }, {\n      default: _withCtx(() => [$data.areChatsLoaded ? (_openBlock(), _createBlock(_component_v_list, {\n        key: 0\n      }, {\n        default: _withCtx(() => [_createVNode(_component_v_list_item, {\n          title: \"Chats\"\n        }), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.userChats, (chat, index) => {\n          return _openBlock(), _createBlock(_component_v_list_item, {\n            key: index,\n            onClick: $event => $options.openChat(chat)\n          }, {\n            default: _withCtx(() => [_createVNode(_component_v_list_item_content, null, {\n              default: _withCtx(() => [_createVNode(_component_v_btn, {\n                variant: \"tonal\",\n                class: \"chat-card\"\n              }, {\n                default: _withCtx(() => [_createVNode(_component_v_list_item_title, null, {\n                  default: _withCtx(() => [_createTextVNode(_toDisplayString(chat.chatName), 1)]),\n                  _: 2\n                }, 1024)]),\n                _: 2\n              }, 1024)]),\n              _: 2\n            }, 1024)]),\n            _: 2\n          }, 1032, [\"onClick\"]);\n        }), 128))]),\n        _: 1\n      })) : _createCommentVNode(\"\", true)]),\n      _: 1\n    }), _createVNode(_component_v_main, {\n      class: \"d-flex align-center justify-center\",\n      style: {\n        \"min-height\": \"max-content\"\n      }\n    }, {\n      default: _withCtx(() => [$data.isChatOpen ? (_openBlock(), _createBlock(_component_ChatView, {\n        key: 0\n      })) : _createCommentVNode(\"\", true)]),\n      _: 1\n    })]),\n    _: 1\n  });\n}","map":{"version":3,"names":["_createBlock","_component_v_layout","class","default","_withCtx","_createVNode","_component_v_app_bar","color","title","_component_v_navigation_drawer","_component_v_list","_component_v_list_item","_createElementBlock","_Fragment","_renderList","$options","connectedUsers","user","index","key","onClick","$event","startChatWithConnectedUser","userId","_component_v_list_item_content","_component_v_btn","variant","_component_v_list_item_title","_createTextVNode","_toDisplayString","username","_","location","$data","areChatsLoaded","userChats","chat","openChat","chatName","_createCommentVNode","_component_v_main","style","isChatOpen","_component_ChatView"],"sources":["C:\\Users\\amarg\\real-time-chat-app\\client\\src\\components\\Home.vue"],"sourcesContent":["<template>\r\n    <v-layout class=\"rounded rounded-md\">\r\n        <v-app-bar color=\"surface-variant\" title=\"Application bar\"></v-app-bar>\r\n\r\n        <v-navigation-drawer>\r\n            <v-list>\r\n                <v-list-item title=\"Online\"></v-list-item>\r\n                <v-list-item v-for=\"(user, index) in connectedUsers\" :key=\"index\"\r\n                    @click=\"startChatWithConnectedUser(user.userId)\">\r\n                    <v-list-item-content>\r\n                        <v-btn variant=\"tonal\" class=\"chat-card\">\r\n                            <v-list-item-title>{{ user.username }}</v-list-item-title>\r\n                        </v-btn>\r\n                    </v-list-item-content>\r\n                </v-list-item>\r\n            </v-list>\r\n        </v-navigation-drawer>\r\n\r\n        <v-navigation-drawer location=\"right\">\r\n            <v-list v-if=\"areChatsLoaded\">\r\n                <v-list-item title=\"Chats\"></v-list-item>\r\n                <v-list-item v-for=\"(chat, index) in userChats\" :key=\"index\" @click=\"openChat(chat)\">\r\n                    <v-list-item-content>\r\n                        <v-btn variant=\"tonal\" class=\"chat-card\">\r\n                            <v-list-item-title>{{ chat.chatName }}</v-list-item-title>\r\n                        </v-btn>\r\n                    </v-list-item-content>\r\n                </v-list-item>\r\n            </v-list>\r\n        </v-navigation-drawer>\r\n\r\n        <v-main class=\"d-flex align-center justify-center\" style=\"min-height:max-content;\">\r\n            <ChatView v-if=\"isChatOpen\"></ChatView>\r\n        </v-main>\r\n    </v-layout>\r\n</template>\r\n\r\n\r\n\r\n<script>\r\nimport ChatView from './Chat.vue'\r\nimport ChatService from '../services/ChatService'\r\nimport { state, socket } from \"@/socket\"\r\nimport UserService from '../services/UserService'\r\nexport default {\r\n    name: 'HomeView',\r\n    components: {\r\n        ChatView,\r\n    },\r\n    data () {\r\n        return {\r\n            areChatsLoaded: false,\r\n            messagesList: [],\r\n            onlineUsers: [],\r\n            userChats: [],\r\n            isChatOpen: false,\r\n        }\r\n    },\r\n    async mounted () {\r\n        try {\r\n            const user = JSON.parse(localStorage.getItem('user'))\r\n            const username = user.username\r\n            const userId = user.id\r\n            socket.auth = { username, userId }\r\n            socket.connect()\r\n\r\n            try {\r\n                const response = await UserService.getUserChats(localStorage.getItem('token'))\r\n                console.log(response)\r\n                if (response.data.userChats.length > 0) {\r\n                    response.data.userChats.forEach(chat => {\r\n                        const userChat = {\r\n                            chatId: chat.id,\r\n                            chatName: chat.name,\r\n                            messages: []\r\n                        }\r\n                        state.UserChats.push(userChat)\r\n                    })\r\n                    this.userChats = state.UserChats.filter(chat => chat.id == null)\r\n                    this.areChatsLoaded = true\r\n                }\r\n            } catch (e) {\r\n                console.error(e)\r\n            }\r\n\r\n            console.log(state.UserChats)\r\n            console.log(this.userChats)\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        async openChat (newChat) {\r\n            this.$router.push({ name: 'HomeView', query: { id: newChat.chatId } })\r\n            const params = {\r\n                id: newChat.chatId\r\n            }\r\n            const response = await ChatService.getChatMessages(localStorage.getItem('token'), params)\r\n\r\n            let index = state.UserChats.findIndex(userChat => userChat.chatId === newChat.chatId);\r\n            let messages = response.data.messages\r\n            if (messages > 0 && index != -1) {\r\n                state.UserChats[index].messages = messages.map(message => ({\r\n                    id: message.id,\r\n                    content: message.messageText,\r\n                    senderUsername: message.senderId\r\n                }))\r\n            }\r\n            this.isChatOpen = true\r\n        },\r\n        async startChatWithConnectedUser (userId) {\r\n            try {\r\n                console.log(userId)\r\n                const response = await ChatService.startChatWithUser(localStorage.getItem('token'), { receiverId: userId })\r\n                if (response.data.status == 'Success') {\r\n                    this.$router.push({ name: 'HomeView', query: { id: response.data.chatId } })\r\n                    this.messagesList = response.data.messages\r\n                }\r\n            } catch (err) {\r\n                console.error(err)\r\n            }\r\n        }\r\n    },\r\n\r\n    computed: {\r\n        connectedUsers () {\r\n            const filterUniqueUsernames = (arr) => {\r\n                const uniqueUsernames = new Set();\r\n                return arr.filter(obj => {\r\n                    if (!uniqueUsernames.has(obj.username)) {\r\n                        uniqueUsernames.add(obj);\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n            };\r\n            return filterUniqueUsernames(state.connectedUsers)\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-card {\r\n    background-color: lightseagreen;\r\n    width: 100%;\r\n}\r\n\r\n.app-button {\r\n    margin-right: 10px;\r\n}\r\n\r\n.chat-text {\r\n    margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":";;;;;;;;;;;;uBACIA,YAAA,CAiCWC,mBAAA;IAjCDC,KAAK,EAAC;EAAoB;IADxCC,OAAA,EAAAC,QAAA,CAEQ,MAAuE,CAAvEC,YAAA,CAAuEC,oBAAA;MAA5DC,KAAK,EAAC,iBAAiB;MAACC,KAAK,EAAC;QAEzCH,YAAA,CAYsBI,8BAAA;MAhB9BN,OAAA,EAAAC,QAAA,CAKY,MAUS,CAVTC,YAAA,CAUSK,iBAAA;QAfrBP,OAAA,EAAAC,QAAA,CAMgB,MAA0C,CAA1CC,YAAA,CAA0CM,sBAAA;UAA7BH,KAAK,EAAC;QAAQ,K,kBAC3BI,mBAAA,CAOcC,SAAA,QAd9BC,WAAA,CAOqDC,QAAA,CAAAC,cAAc,EAPnE,CAOqCC,IAAI,EAAEC,KAAK;+BAAhClB,YAAA,CAOcW,sBAAA;YAPwCQ,GAAG,EAAED,KAAK;YAC3DE,OAAK,EAAAC,MAAA,IAAEN,QAAA,CAAAO,0BAA0B,CAACL,IAAI,CAACM,MAAM;;YARlEpB,OAAA,EAAAC,QAAA,CASoB,MAIsB,CAJtBC,YAAA,CAIsBmB,8BAAA;cAb1CrB,OAAA,EAAAC,QAAA,CAUwB,MAEQ,CAFRC,YAAA,CAEQoB,gBAAA;gBAFDC,OAAO,EAAC,OAAO;gBAACxB,KAAK,EAAC;;gBAVrDC,OAAA,EAAAC,QAAA,CAW4B,MAA0D,CAA1DC,YAAA,CAA0DsB,4BAAA;kBAXtFxB,OAAA,EAAAC,QAAA,CAW+C,MAAmB,CAXlEwB,gBAAA,CAAAC,gBAAA,CAWkDZ,IAAI,CAACa,QAAQ,M;kBAX/DC,CAAA;;gBAAAA,CAAA;;cAAAA,CAAA;;YAAAA,CAAA;;;QAAAA,CAAA;;MAAAA,CAAA;QAkBQ1B,YAAA,CAWsBI,8BAAA;MAXDuB,QAAQ,EAAC;IAAO;MAlB7C7B,OAAA,EAAAC,QAAA,CAmBY,MASS,CATK6B,KAAA,CAAAC,cAAc,I,cAA5BlC,YAAA,CASSU,iBAAA;QA5BrBS,GAAA;MAAA;QAAAhB,OAAA,EAAAC,QAAA,CAoBgB,MAAyC,CAAzCC,YAAA,CAAyCM,sBAAA;UAA5BH,KAAK,EAAC;QAAO,K,kBAC1BI,mBAAA,CAMcC,SAAA,QA3B9BC,WAAA,CAqBqDmB,KAAA,CAAAE,SAAS,EArB9D,CAqBqCC,IAAI,EAAElB,KAAK;+BAAhClB,YAAA,CAMcW,sBAAA;YANmCQ,GAAG,EAAED,KAAK;YAAGE,OAAK,EAAAC,MAAA,IAAEN,QAAA,CAAAsB,QAAQ,CAACD,IAAI;;YArBlGjC,OAAA,EAAAC,QAAA,CAsBoB,MAIsB,CAJtBC,YAAA,CAIsBmB,8BAAA;cA1B1CrB,OAAA,EAAAC,QAAA,CAuBwB,MAEQ,CAFRC,YAAA,CAEQoB,gBAAA;gBAFDC,OAAO,EAAC,OAAO;gBAACxB,KAAK,EAAC;;gBAvBrDC,OAAA,EAAAC,QAAA,CAwB4B,MAA0D,CAA1DC,YAAA,CAA0DsB,4BAAA;kBAxBtFxB,OAAA,EAAAC,QAAA,CAwB+C,MAAmB,CAxBlEwB,gBAAA,CAAAC,gBAAA,CAwBkDO,IAAI,CAACE,QAAQ,M;kBAxB/DP,CAAA;;gBAAAA,CAAA;;cAAAA,CAAA;;YAAAA,CAAA;;;QAAAA,CAAA;YAAAQ,mBAAA,W;MAAAR,CAAA;QA+BQ1B,YAAA,CAESmC,iBAAA;MAFDtC,KAAK,EAAC,oCAAoC;MAACuC,KAA+B,EAA/B;QAAA;MAAA;;MA/B3DtC,OAAA,EAAAC,QAAA,CAgCY,MAAuC,CAAvB6B,KAAA,CAAAS,UAAU,I,cAA1B1C,YAAA,CAAuC2C,mBAAA;QAhCnDxB,GAAA;MAAA,MAAAoB,mBAAA,W;MAAAR,CAAA;;IAAAA,CAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}