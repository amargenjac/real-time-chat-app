{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ChatView from './Chat.vue';\nimport ChatService from '../services/ChatService';\nimport { state, socket } from \"@/socket\";\nimport UserService from '../services/UserService';\nexport default {\n  name: 'HomeView',\n  components: {\n    ChatView\n  },\n  data() {\n    return {\n      areChatsLoaded: false,\n      messagesList: [],\n      onlineUsers: [],\n      userChats: [],\n      isChatOpen: false\n    };\n  },\n  async mounted() {\n    try {\n      const user = JSON.parse(localStorage.getItem('user'));\n      const username = user.username;\n      const userId = user.id;\n      socket.auth = {\n        username,\n        userId\n      };\n      socket.connect();\n      try {\n        const response = await UserService.getUserChats(localStorage.getItem('token'));\n        console.log(response);\n        if (response.data.userChats.length > 0) {\n          response.data.userChats.forEach(chat => {\n            const userChat = {\n              chatId: chat.id,\n              chatName: chat.name,\n              messages: []\n            };\n            state.UserChats.push(userChat);\n          });\n          this.userChats = state.UserChats.filter(chat => chat.id == null);\n          this.areChatsLoaded = true;\n        }\n      } catch (e) {\n        console.error(e);\n      }\n      console.log(state.UserChats);\n      console.log(this.userChats);\n    } catch (e) {\n      console.error(e);\n    }\n  },\n  methods: {\n    async openChat(newChat) {\n      this.$router.push({\n        name: 'HomeView',\n        query: {\n          id: newChat.chatId\n        }\n      });\n      const params = {\n        id: newChat.chatId\n      };\n      const response = await ChatService.getChatMessages(localStorage.getItem('token'), params);\n      let index = state.UserChats.findIndex(userChat => userChat.chatId === newChat.chatId);\n      let messages = response.data.messages;\n      if (messages > 0 && index != -1) {\n        state.UserChats[index].messages = messages.map(message => ({\n          id: message.id,\n          content: message.messageText,\n          senderUsername: message.senderId\n        }));\n      }\n      this.isChatOpen = true;\n    },\n    async startChatWithConnectedUser(userId) {\n      try {\n        console.log(userId);\n        const response = await ChatService.startChatWithUser(localStorage.getItem('token'), {\n          receiverId: userId\n        });\n        if (response.data.status == 'Success') {\n          this.$router.push({\n            name: 'HomeView',\n            query: {\n              id: response.data.chatId\n            }\n          });\n          this.messagesList = response.data.messages;\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  },\n  computed: {\n    connectedUsers() {\n      const filterUniqueUsernames = arr => {\n        const uniqueUsernames = new Set();\n        return arr.filter(obj => {\n          if (!uniqueUsernames.has(obj.username)) {\n            uniqueUsernames.add(obj);\n            return true;\n          }\n          return false;\n        });\n      };\n      return filterUniqueUsernames(state.connectedUsers);\n    }\n  }\n};","map":{"version":3,"names":["ChatView","ChatService","state","socket","UserService","name","components","data","areChatsLoaded","messagesList","onlineUsers","userChats","isChatOpen","mounted","user","JSON","parse","localStorage","getItem","username","userId","id","auth","connect","response","getUserChats","console","log","length","forEach","chat","userChat","chatId","chatName","messages","UserChats","push","filter","e","error","methods","openChat","newChat","$router","query","params","getChatMessages","index","findIndex","map","message","content","messageText","senderUsername","senderId","startChatWithConnectedUser","startChatWithUser","receiverId","status","err","computed","connectedUsers","filterUniqueUsernames","arr","uniqueUsernames","Set","obj","has","add"],"sources":["C:\\Users\\amarg\\real-time-chat-app\\client\\src\\components\\Home.vue"],"sourcesContent":["<template>\r\n    <v-layout class=\"rounded rounded-md\">\r\n        <v-app-bar color=\"surface-variant\" title=\"Application bar\"></v-app-bar>\r\n\r\n        <v-navigation-drawer>\r\n            <v-list>\r\n                <v-list-item title=\"Online\"></v-list-item>\r\n                <v-list-item v-for=\"(user, index) in connectedUsers\" :key=\"index\"\r\n                    @click=\"startChatWithConnectedUser(user.userId)\">\r\n                    <v-list-item-content>\r\n                        <v-btn variant=\"tonal\" class=\"chat-card\">\r\n                            <v-list-item-title>{{ user.username }}</v-list-item-title>\r\n                        </v-btn>\r\n                    </v-list-item-content>\r\n                </v-list-item>\r\n            </v-list>\r\n        </v-navigation-drawer>\r\n\r\n        <v-navigation-drawer location=\"right\">\r\n            <v-list v-if=\"areChatsLoaded\">\r\n                <v-list-item title=\"Chats\"></v-list-item>\r\n                <v-list-item v-for=\"(chat, index) in userChats\" :key=\"index\" @click=\"openChat(chat)\">\r\n                    <v-list-item-content>\r\n                        <v-btn variant=\"tonal\" class=\"chat-card\">\r\n                            <v-list-item-title>{{ chat.chatName }}</v-list-item-title>\r\n                        </v-btn>\r\n                    </v-list-item-content>\r\n                </v-list-item>\r\n            </v-list>\r\n        </v-navigation-drawer>\r\n\r\n        <v-main class=\"d-flex align-center justify-center\" style=\"min-height:max-content;\">\r\n            <ChatView v-if=\"isChatOpen\"></ChatView>\r\n        </v-main>\r\n    </v-layout>\r\n</template>\r\n\r\n\r\n\r\n<script>\r\nimport ChatView from './Chat.vue'\r\nimport ChatService from '../services/ChatService'\r\nimport { state, socket } from \"@/socket\"\r\nimport UserService from '../services/UserService'\r\nexport default {\r\n    name: 'HomeView',\r\n    components: {\r\n        ChatView,\r\n    },\r\n    data () {\r\n        return {\r\n            areChatsLoaded: false,\r\n            messagesList: [],\r\n            onlineUsers: [],\r\n            userChats: [],\r\n            isChatOpen: false,\r\n        }\r\n    },\r\n    async mounted () {\r\n        try {\r\n            const user = JSON.parse(localStorage.getItem('user'))\r\n            const username = user.username\r\n            const userId = user.id\r\n            socket.auth = { username, userId }\r\n            socket.connect()\r\n\r\n            try {\r\n                const response = await UserService.getUserChats(localStorage.getItem('token'))\r\n                console.log(response)\r\n                if (response.data.userChats.length > 0) {\r\n                    response.data.userChats.forEach(chat => {\r\n                        const userChat = {\r\n                            chatId: chat.id,\r\n                            chatName: chat.name,\r\n                            messages: []\r\n                        }\r\n                        state.UserChats.push(userChat)\r\n                    })\r\n                    this.userChats = state.UserChats.filter(chat => chat.id == null)\r\n                    this.areChatsLoaded = true\r\n                }\r\n            } catch (e) {\r\n                console.error(e)\r\n            }\r\n\r\n            console.log(state.UserChats)\r\n            console.log(this.userChats)\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        async openChat (newChat) {\r\n            this.$router.push({ name: 'HomeView', query: { id: newChat.chatId } })\r\n            const params = {\r\n                id: newChat.chatId\r\n            }\r\n            const response = await ChatService.getChatMessages(localStorage.getItem('token'), params)\r\n\r\n            let index = state.UserChats.findIndex(userChat => userChat.chatId === newChat.chatId);\r\n            let messages = response.data.messages\r\n            if (messages > 0 && index != -1) {\r\n                state.UserChats[index].messages = messages.map(message => ({\r\n                    id: message.id,\r\n                    content: message.messageText,\r\n                    senderUsername: message.senderId\r\n                }))\r\n            }\r\n            this.isChatOpen = true\r\n        },\r\n        async startChatWithConnectedUser (userId) {\r\n            try {\r\n                console.log(userId)\r\n                const response = await ChatService.startChatWithUser(localStorage.getItem('token'), { receiverId: userId })\r\n                if (response.data.status == 'Success') {\r\n                    this.$router.push({ name: 'HomeView', query: { id: response.data.chatId } })\r\n                    this.messagesList = response.data.messages\r\n                }\r\n            } catch (err) {\r\n                console.error(err)\r\n            }\r\n        }\r\n    },\r\n\r\n    computed: {\r\n        connectedUsers () {\r\n            const filterUniqueUsernames = (arr) => {\r\n                const uniqueUsernames = new Set();\r\n                return arr.filter(obj => {\r\n                    if (!uniqueUsernames.has(obj.username)) {\r\n                        uniqueUsernames.add(obj);\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n            };\r\n            return filterUniqueUsernames(state.connectedUsers)\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-card {\r\n    background-color: lightseagreen;\r\n    width: 100%;\r\n}\r\n\r\n.app-button {\r\n    margin-right: 10px;\r\n}\r\n\r\n.chat-text {\r\n    margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}